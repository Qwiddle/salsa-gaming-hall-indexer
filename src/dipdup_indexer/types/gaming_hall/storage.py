# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Any
from typing import Dict
from typing import List
from typing import Optional
from typing import Union

from pydantic import BaseModel
from pydantic import Extra


class Key(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class LedgerItem(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key
    value: str


class Key1(BaseModel):
    class Config:
        extra = Extra.forbid

    address_0: str
    address_1: str
    nat: str


class Operator(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key1
    value: Dict[str, Any]


class TokenMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    token_id: str
    token_info: Dict[str, str]


class Assets(BaseModel):
    class Config:
        extra = Extra.forbid

    ledger: List[LedgerItem]
    operators: List[Operator]
    token_metadata: Dict[str, TokenMetadata]
    token_total_supply: Dict[str, str]


class PauseableAdminItem(BaseModel):
    class Config:
        extra = Extra.forbid

    admin: str
    paused: bool
    pending_admin: Optional[str]


class GameCurrency(BaseModel):
    class Config:
        extra = Extra.forbid

    fa2_address: str
    token_id: Optional[str]


class StageItem(BaseModel):
    class Config:
        extra = Extra.forbid

    game_Resolved: Dict[str, Any]


class StageItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    maker_Committed: Dict[str, Any]


class GameInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    game_id: str
    game_currency: GameCurrency
    stage: Union[StageItem, StageItem1]
    maker: str
    house_hash: Optional[str]
    start_time: str
    bet: str
    guess: List[str]
    payout: str
    ended: Optional[str]
    winner: Optional[bool]
    result: Optional[str]
    notify: bool


class GameCode(BaseModel):
    class Config:
        extra = Extra.forbid

    game_id: str
    playable: bool
    payout_calc_lambda: str
    gameplay_lambda: str
    guess_limit: str


class Key2(BaseModel):
    class Config:
        extra = Extra.forbid

    fa2_address: str
    token_id: Optional[str]


class GameCurrency1(BaseModel):
    class Config:
        extra = Extra.forbid

    fa2_address: str
    token_id: Optional[str]


class ShareCurrency(BaseModel):
    class Config:
        extra = Extra.forbid

    fa2_address: str
    token_id: Optional[str]


class Value(BaseModel):
    class Config:
        extra = Extra.forbid

    game_currency: GameCurrency1
    share_currency: ShareCurrency
    total_bankroll: str
    total_vbankroll: str
    total_shares_issued: str


class BankrollLedgerItem(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key2
    value: Value


class GamingHallStorage(BaseModel):
    class Config:
        extra = Extra.forbid

    assets: Assets
    metadata: Dict[str, str]
    pauseable_admin: Optional[PauseableAdminItem]
    game_info: Dict[str, GameInfo]
    game_code: Dict[str, GameCode]
    bankroll_ledger: List[BankrollLedgerItem]
    current_game_id: str
    next_share_token_id: str
    next_game_id: str
    house_wallet: str
    gp_core: str
    gp_cutoff: str
    game_accuracy: str
    invest_fee: str
    max_payout: str
